{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","margin","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","defaultProps","AddContact","errors","onSubmit","e","preventDefault","newContact","post","erros","setTimeout","history","push","target","EditContact","updContact","match","params","put","Header","branding","href","About","NotFound","Test","title","body","fetch","then","response","json","console","log","prevProps","prevState","nextProps","test","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2ae9d42e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context = React.createContext();\r\n\r\n// The reducer is a pure function that takes the previous state and an action, and returns the next state\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                // Spread operator\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                // Spread operator\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                // Spread operator\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [\r\n\r\n        ],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n        this.setState({\r\n            contacts: res.data\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// Exporting and Destructuring\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        } catch(e) {\r\n            dispatch({ type: 'DELETE_CONTACT', payload: id });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // Destructuring\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name} <i onClick={() => this.setState({ showContactInfo: !showContactInfo })} className=\"fa fa-sort-down\" style={{ cursor: 'pointer' }}></i>\r\n\r\n                                <i className=\"fa fa-times\" style={{ cursor: 'pointer', float: 'right', color: 'red' }} onClick={ this.onDeleteClick.bind(this, id, dispatch) }></i>\r\n\r\n                                <Link to={`contact/edit/${id}`} >\r\n                                    <i className=\"fa fa-pencil\" style={{ cursor: 'pointer', float: 'right', color: 'blue', margin: '0 1rem' }}></i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Email: {email}</li>\r\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>\r\n                            ) : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\n// Type checking for properties\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nexport default class Contacts extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    // Destructuring\r\n                    const { contacts } = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-success\">Contact List</span>\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact \r\n                                key={contact.id} \r\n                                contact={contact} \r\n                                 />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nexport default function TextInputGroup({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input \r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {\r\n                    'is-invalid': error\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">\r\n                {error}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class AddContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Check for errors\r\n        if(name === '') {\r\n            this.setState({errors: { name: 'Name is required' }});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: { email: 'Email is required' }});\r\n            return;\r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors: { phone: 'Phone is required' }});\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            // ES6 syntax same as 'name: name' key value pair\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n        dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n\r\n        // Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            erros: {}\r\n        });\r\n\r\n        // Redirects after a Delay to Home page after submitting a Contact\r\n        const home = () => this.props.history.push('/');\r\n        setTimeout(home, 2000);\r\n\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n\r\n        // Destructuring\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">\r\n                                Add Contact\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup \r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup \r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup \r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input \r\n                                        className=\"btn btn-dark btn-block\" \r\n                                        type=\"submit\" \r\n                                        value=\"Add Contact\" \r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class EditContact extends Component {\r\n\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n\r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        })\r\n    }\r\n\r\n    onSubmit = async(dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const { name, email, phone } = this.state;\r\n\r\n        // Check for errors\r\n        if(name === '') {\r\n            this.setState({errors: { name: 'Name is required' }});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors: { email: 'Email is required' }});\r\n            return;\r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors: { phone: 'Phone is required' }});\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n\r\n        dispatch({type:'UPDATE_CONTACT', payload: res.data});\r\n\r\n        // Clear State\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            erros: {}\r\n        });\r\n\r\n        // Redirects after a Delay to Home page after submitting a Contact\r\n        const home = () => this.props.history.push('/');\r\n        setTimeout(home, 1000);\r\n\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n\r\n        // Destructuring\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">\r\n                                Edit Contact\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup \r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Enter Name\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup \r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter Email\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup \r\n                                        label=\"Phone\"\r\n                                        name=\"phone\"\r\n                                        placeholder=\"Enter Phone\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input \r\n                                        className=\"btn btn-dark btn-block\" \r\n                                        type=\"submit\" \r\n                                        value=\"Update Contact\" \r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header(props) {\r\n    // Destructuring\r\n    const { branding } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fa fa-home\"></i> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fa fa-plus\"></i> Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fa fa-question\"></i> About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n// Default Property\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\n// Type checking for properties\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};","import React from 'react';\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                404 Page Not NotFound\r\n            </h1>\r\n            <p className=\"lead\">\r\n                No Go\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Test extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    }\r\n\r\n    // Lifecycle Methods\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n        .then(response => response.json())\r\n        .then(json => this.setState({\r\n            title: json.title,\r\n            body: json.body\r\n        }))\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('componentDidUpdate....');\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        return {\r\n            test: 'something'\r\n        }\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log('getSnapshotBeforeUpdate....');\r\n    }\r\n\r\n    // Deprecated\r\n    /* componentWillMount() {\r\n        console.log('componentWillMount....');\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        console.log('componentWillUpdate....');\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextState) {\r\n        console.log('componentWillReceiveProps....');\r\n    } */\r\n\r\n    render() {\r\n\r\n        // Destructuring\r\n        const { title, body } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <h1>{ title }</h1>\r\n                <p>{ body }</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}